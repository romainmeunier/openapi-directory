{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "api.redirection.io",
  "basePath": "/",
  "info": {
    "contact": {
      "x-twitter": "redirectionio"
    },
    "description": "API documentation for redirection.io",
    "title": "redirection.io",
    "version": "1.1.0",
    "x-apisguru-categories": [
      "hosting"
    ],
    "x-logo": {
      "url": "https://twitter.com/redirectionio/profile_image?size=original"
    },
    "x-origin": [
      {
        "format": "swagger",
        "url": "https://api.redirection.io/docs.json",
        "version": "2.0"
      }
    ],
    "x-preferred": true,
    "x-providerName": "redirection.io"
  },
  "securityDefinitions": {
    "apiKey": {
      "description": "Value for the Authorization header",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "paths": {
    "/agent-flush-aggregate-requests": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postAgentFlushAggregateRequestCollection",
        "parameters": [
          {
            "description": "The new AgentFlushAggregateRequest resource",
            "in": "body",
            "name": "agentFlushAggregateRequest",
            "schema": {
              "$ref": "#/definitions/AgentFlushAggregateRequest"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "AgentFlushAggregateRequest resource created",
            "schema": {
              "$ref": "#/definitions/AgentFlushAggregateRequest"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a AgentFlushAggregateRequest resource.",
        "tags": [
          "AgentFlushAggregateRequest"
        ]
      }
    },
    "/agent-flush-requests": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postAgentFlushRequestCollection",
        "parameters": [
          {
            "description": "The new AgentFlushRequest resource",
            "in": "body",
            "name": "agentFlushRequest",
            "schema": {
              "$ref": "#/definitions/AgentFlushRequest"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "AgentFlushRequest resource created",
            "schema": {
              "$ref": "#/definitions/AgentFlushRequest"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a AgentFlushRequest resource.",
        "tags": [
          "AgentFlushRequest"
        ]
      }
    },
    "/agent-instance-updates": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postAgentInstanceUpdateCollection",
        "parameters": [
          {
            "description": "The new AgentInstanceUpdate resource",
            "in": "body",
            "name": "agentInstanceUpdate",
            "schema": {
              "$ref": "#/definitions/AgentInstanceUpdate-WriteStart"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "AgentInstanceUpdate resource created",
            "schema": {
              "$ref": "#/definitions/AgentInstanceUpdate-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a AgentInstanceUpdate resource.",
        "tags": [
          "AgentInstanceUpdate"
        ]
      }
    },
    "/agent-instance-updates/{id}": {
      "get": {
        "operationId": "getAgentInstanceUpdateItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "AgentInstanceUpdate resource response",
            "schema": {
              "$ref": "#/definitions/AgentInstanceUpdate-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a AgentInstanceUpdate resource.",
        "tags": [
          "AgentInstanceUpdate"
        ]
      },
      "put": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "putAgentInstanceUpdateItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated AgentInstanceUpdate resource",
            "in": "body",
            "name": "agentInstanceUpdate",
            "schema": {
              "$ref": "#/definitions/AgentInstanceUpdate-WriteStart"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "AgentInstanceUpdate resource updated",
            "schema": {
              "$ref": "#/definitions/AgentInstanceUpdate-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Replaces the AgentInstanceUpdate resource.",
        "tags": [
          "AgentInstanceUpdate"
        ]
      }
    },
    "/agent-rule-complexes": {
      "get": {
        "operationId": "agentRuleComplexCollection",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleComplex collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/RuleComplex-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of RuleComplex resources.",
        "tags": [
          "RuleComplex"
        ]
      }
    },
    "/agent-rule-straights": {
      "get": {
        "operationId": "agentRuleSimpleCollection",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleSimple collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/RuleSimple-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of RuleSimple resources.",
        "tags": [
          "RuleSimple"
        ]
      }
    },
    "/aggregate-logs": {
      "get": {
        "operationId": "getAggregateLogCollection",
        "parameters": [
          {
            "description": "The collection page number",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "lastOccurrenceAt",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "lastOccurrenceAt_gt",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "lastOccurrenceAt_gte",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "lastOccurrenceAt_lt",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "lastOccurrenceAt_lte",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fromUrl",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "statusCode",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "toUrl",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "viewCount",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "AggregateLog collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/AggregateLog-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of AggregateLog resources.",
        "tags": [
          "AggregateLog"
        ]
      }
    },
    "/aggregate-logs/{id}": {
      "get": {
        "operationId": "getAggregateLogItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "AggregateLog resource response",
            "schema": {
              "$ref": "#/definitions/AggregateLog-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a AggregateLog resource.",
        "tags": [
          "AggregateLog"
        ]
      }
    },
    "/explain-urls": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postExplainUrlCollection",
        "parameters": [
          {
            "description": "The new ExplainUrl resource",
            "in": "body",
            "name": "explainUrl",
            "schema": {
              "$ref": "#/definitions/ExplainUrl-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "ExplainUrl resource created",
            "schema": {
              "$ref": "#/definitions/ExplainUrl"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a ExplainUrl resource.",
        "tags": [
          "ExplainUrl"
        ]
      }
    },
    "/explain-urls/{id}": {
      "get": {
        "operationId": "getExplainUrlItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "ExplainUrl resource response",
            "schema": {
              "$ref": "#/definitions/ExplainUrl"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a ExplainUrl resource.",
        "tags": [
          "ExplainUrl"
        ]
      }
    },
    "/export-rule-complexes": {
      "get": {
        "operationId": "exportRuleComplexCollection",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "redirectCode",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "redirectCode[]",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "source.input",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isEnabled",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "isEnabled[]",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "target",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[id]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[target]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[viewCount]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[source.input]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[redirectCode]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[isEnabled]",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleComplex collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/RuleComplex-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of RuleComplex resources.",
        "tags": [
          "RuleComplex"
        ]
      }
    },
    "/export-rule-simples": {
      "get": {
        "operationId": "exportRuleSimpleCollection",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "redirectCode",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "redirectCode[]",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "source.input",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isEnabled",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "isEnabled[]",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "target",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[id]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[target]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[viewCount]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[source.input]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[redirectCode]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[isEnabled]",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleSimple collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/RuleSimple-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of RuleSimple resources.",
        "tags": [
          "RuleSimple"
        ]
      }
    },
    "/exports": {
      "get": {
        "operationId": "getExportCollection",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Export collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Export-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of Export resources.",
        "tags": [
          "Export"
        ]
      },
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postExportCollection",
        "parameters": [
          {
            "description": "The new Export resource",
            "in": "body",
            "name": "export",
            "schema": {
              "$ref": "#/definitions/Export-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "Export resource created",
            "schema": {
              "$ref": "#/definitions/Export-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a Export resource.",
        "tags": [
          "Export"
        ]
      }
    },
    "/exports/{id}": {
      "get": {
        "operationId": "getExportItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Export resource response",
            "schema": {
              "$ref": "#/definitions/Export-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a Export resource.",
        "tags": [
          "Export"
        ]
      }
    },
    "/impact-rule-actions": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postImpactRuleActionCollection",
        "parameters": [
          {
            "description": "The new ImpactRuleAction resource",
            "in": "body",
            "name": "impactRuleAction",
            "schema": {
              "$ref": "#/definitions/ImpactRuleAction-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "ImpactRuleAction resource created",
            "schema": {
              "$ref": "#/definitions/ImpactRuleAction-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a ImpactRuleAction resource.",
        "tags": [
          "ImpactRuleAction"
        ]
      }
    },
    "/impact-rule-actions/{id}": {
      "get": {
        "operationId": "getImpactRuleActionItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "ImpactRuleAction resource response",
            "schema": {
              "$ref": "#/definitions/ImpactRuleAction"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a ImpactRuleAction resource.",
        "tags": [
          "ImpactRuleAction"
        ]
      }
    },
    "/imports": {
      "get": {
        "operationId": "getImportCollection",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Import collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Import-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of Import resources.",
        "tags": [
          "Import"
        ]
      },
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postImportCollection",
        "parameters": [
          {
            "description": "The new Import resource",
            "in": "body",
            "name": "import",
            "schema": {
              "$ref": "#/definitions/Import-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "Import resource created",
            "schema": {
              "$ref": "#/definitions/Import-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a Import resource.",
        "tags": [
          "Import"
        ]
      }
    },
    "/imports/{id}": {
      "get": {
        "operationId": "getImportItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Import resource response",
            "schema": {
              "$ref": "#/definitions/Import-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a Import resource.",
        "tags": [
          "Import"
        ]
      }
    },
    "/instances": {
      "get": {
        "operationId": "getInstanceCollection",
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Instance collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Instance-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of Instance resources.",
        "tags": [
          "Instance"
        ]
      }
    },
    "/instances/{id}": {
      "get": {
        "operationId": "getInstanceItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Instance resource response",
            "schema": {
              "$ref": "#/definitions/Instance-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a Instance resource.",
        "tags": [
          "Instance"
        ]
      }
    },
    "/invitations": {
      "get": {
        "operationId": "getInvitationCollection",
        "parameters": [
          {
            "in": "query",
            "name": "targetId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "targetType",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Invitation collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Invitation-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of Invitation resources.",
        "tags": [
          "Invitation"
        ]
      },
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postInvitationCollection",
        "parameters": [
          {
            "description": "The new Invitation resource",
            "in": "body",
            "name": "invitation",
            "schema": {
              "$ref": "#/definitions/Invitation-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "Invitation resource created",
            "schema": {
              "$ref": "#/definitions/Invitation-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a Invitation resource.",
        "tags": [
          "Invitation"
        ]
      }
    },
    "/invitations/accept/{token}": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "acceptInvitationItem",
        "parameters": [
          {
            "description": "The invitation acceptation token",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new Invitation resource",
            "in": "body",
            "name": "invitation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "Invitation resource created",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a Invitation resource.",
        "tags": [
          "Invitation"
        ]
      }
    },
    "/invitations/{id}": {
      "delete": {
        "operationId": "deleteInvitationItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Invitation resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Removes the Invitation resource.",
        "tags": [
          "Invitation"
        ]
      },
      "get": {
        "operationId": "getInvitationItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Invitation resource response",
            "schema": {
              "$ref": "#/definitions/Invitation-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a Invitation resource.",
        "tags": [
          "Invitation"
        ]
      }
    },
    "/logs": {
      "get": {
        "operationId": "getLogCollection",
        "parameters": [
          {
            "description": "The collection page number",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "createdAt",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "createdAt_gt",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "createdAt_gte",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "createdAt_lt",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "createdAt_lte",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fromUrl",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "referer",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "statusCode",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "toUrl",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "host",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "instanceName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "simplifiedUserAgent",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userAgent",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ruleType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ruleId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "excludeUrls",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Log collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Log-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of Log resources.",
        "tags": [
          "Log"
        ]
      }
    },
    "/logs/{id}": {
      "get": {
        "operationId": "getLogItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Log resource response",
            "schema": {
              "$ref": "#/definitions/Log-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a Log resource.",
        "tags": [
          "Log"
        ]
      }
    },
    "/organizations": {
      "get": {
        "operationId": "getOrganizationCollection",
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Organization collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Organization-List"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of Organization resources.",
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postOrganizationCollection",
        "parameters": [
          {
            "description": "The new Organization resource",
            "in": "body",
            "name": "organization",
            "schema": {
              "$ref": "#/definitions/Organization-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "Organization resource created",
            "schema": {
              "$ref": "#/definitions/Organization-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a Organization resource.",
        "tags": [
          "Organization"
        ]
      }
    },
    "/organizations/{id}": {
      "delete": {
        "operationId": "deleteOrganizationItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Organization resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Removes the Organization resource.",
        "tags": [
          "Organization"
        ]
      },
      "get": {
        "operationId": "getOrganizationItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Organization resource response",
            "schema": {
              "$ref": "#/definitions/Organization-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a Organization resource.",
        "tags": [
          "Organization"
        ]
      },
      "put": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "putOrganizationItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated Organization resource",
            "in": "body",
            "name": "organization",
            "schema": {
              "$ref": "#/definitions/Organization-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Organization resource updated",
            "schema": {
              "$ref": "#/definitions/Organization-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Replaces the Organization resource.",
        "tags": [
          "Organization"
        ]
      }
    },
    "/projects": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postProjectCollection",
        "parameters": [
          {
            "description": "The new Project resource",
            "in": "body",
            "name": "project",
            "schema": {
              "$ref": "#/definitions/Project-CreationWrite"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "Project resource created",
            "schema": {
              "$ref": "#/definitions/Project-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a Project resource.",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}": {
      "delete": {
        "operationId": "deleteProjectItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Project resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Removes the Project resource.",
        "tags": [
          "Project"
        ]
      },
      "get": {
        "operationId": "getProjectItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Project resource response",
            "schema": {
              "$ref": "#/definitions/Project-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a Project resource.",
        "tags": [
          "Project"
        ]
      },
      "put": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "putProjectItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated Project resource",
            "in": "body",
            "name": "project",
            "schema": {
              "$ref": "#/definitions/Project-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Project resource updated",
            "schema": {
              "$ref": "#/definitions/Project-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Replaces the Project resource.",
        "tags": [
          "Project"
        ]
      }
    },
    "/publish-histories": {
      "get": {
        "operationId": "getPublishHistoryCollection",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The collection page number",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "PublishHistory collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/PublishHistory-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of PublishHistory resources.",
        "tags": [
          "PublishHistory"
        ]
      }
    },
    "/publish-histories/{id}": {
      "get": {
        "operationId": "getPublishHistoryItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "PublishHistory resource response",
            "schema": {
              "$ref": "#/definitions/PublishHistory"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a PublishHistory resource.",
        "tags": [
          "PublishHistory"
        ]
      }
    },
    "/rule-actions": {
      "get": {
        "operationId": "getRuleActionCollection",
        "parameters": [
          {
            "in": "query",
            "name": "versionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The collection page number",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleAction collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/RuleAction-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of RuleAction resources.",
        "tags": [
          "RuleAction"
        ]
      },
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postRuleActionCollection",
        "parameters": [
          {
            "description": "The new RuleAction resource",
            "in": "body",
            "name": "ruleAction",
            "schema": {
              "$ref": "#/definitions/RuleAction-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "RuleAction resource created",
            "schema": {
              "$ref": "#/definitions/RuleAction-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a RuleAction resource.",
        "tags": [
          "RuleAction"
        ]
      }
    },
    "/rule-actions/{id}": {
      "delete": {
        "operationId": "deleteRuleActionItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "RuleAction resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Removes the RuleAction resource.",
        "tags": [
          "RuleAction"
        ]
      },
      "get": {
        "operationId": "getRuleActionItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleAction resource response",
            "schema": {
              "$ref": "#/definitions/RuleAction-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a RuleAction resource.",
        "tags": [
          "RuleAction"
        ]
      }
    },
    "/rule-complexes": {
      "get": {
        "operationId": "getRuleComplexCollection",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "redirectCode",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "redirectCode[]",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "source.input",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isEnabled",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "isEnabled[]",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "target",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[id]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[target]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[viewCount]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[source.input]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[redirectCode]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[isEnabled]",
            "required": false,
            "type": "string"
          },
          {
            "description": "The collection page number",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleComplex collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/RuleComplex-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of RuleComplex resources.",
        "tags": [
          "RuleComplex"
        ]
      }
    },
    "/rule-complexes/{id}": {
      "get": {
        "operationId": "getRuleComplexItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleComplex resource response",
            "schema": {
              "$ref": "#/definitions/RuleComplex-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a RuleComplex resource.",
        "tags": [
          "RuleComplex"
        ]
      }
    },
    "/rule-set-versions": {
      "get": {
        "operationId": "getRuleSetVersionCollection",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[createdAt]",
            "required": false,
            "type": "string"
          },
          {
            "description": "The collection page number",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleSetVersion collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/RuleSetVersion-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of RuleSetVersion resources.",
        "tags": [
          "RuleSetVersion"
        ]
      }
    },
    "/rule-set-versions/{id}": {
      "get": {
        "operationId": "getRuleSetVersionItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleSetVersion resource response",
            "schema": {
              "$ref": "#/definitions/RuleSetVersion-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a RuleSetVersion resource.",
        "tags": [
          "RuleSetVersion"
        ]
      }
    },
    "/rule-set-versions/{id}/clear": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "clearRuleSetVersionItem",
        "parameters": [
          {
            "description": "The id of the version",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new RuleSetVersion resource",
            "in": "body",
            "name": "ruleSetVersion",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleSetVersion"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "RuleSetVersion resource created",
            "schema": {
              "$ref": "#/definitions/RuleSetVersion"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Clear a version",
        "tags": [
          "RuleSetVersion"
        ]
      }
    },
    "/rule-set-versions/{id}/publish": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "publishRuleSetVersionItem",
        "parameters": [
          {
            "description": "The id of the version",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new RuleSetVersion resource",
            "in": "body",
            "name": "ruleSetVersion",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleSetVersion"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "RuleSetVersion resource created",
            "schema": {
              "$ref": "#/definitions/RuleSetVersion"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Publish a version",
        "tags": [
          "RuleSetVersion"
        ]
      }
    },
    "/rule-simples": {
      "get": {
        "operationId": "getRuleSimpleCollection",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "redirectCode",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "redirectCode[]",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "source.input",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isEnabled",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "isEnabled[]",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "target",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[id]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[target]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[viewCount]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[source.input]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[redirectCode]",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sort[isEnabled]",
            "required": false,
            "type": "string"
          },
          {
            "description": "The collection page number",
            "in": "query",
            "name": "page",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleSimple collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/RuleSimple-Read"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of RuleSimple resources.",
        "tags": [
          "RuleSimple"
        ]
      }
    },
    "/rule-simples/{id}": {
      "get": {
        "operationId": "getRuleSimpleItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "RuleSimple resource response",
            "schema": {
              "$ref": "#/definitions/RuleSimple-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a RuleSimple resource.",
        "tags": [
          "RuleSimple"
        ]
      }
    },
    "/user-organizations": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postUserOrganizationCollection",
        "parameters": [
          {
            "description": "The new UserOrganization resource",
            "in": "body",
            "name": "userOrganization",
            "schema": {
              "$ref": "#/definitions/UserOrganization-CreationWrite"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "UserOrganization resource created",
            "schema": {
              "$ref": "#/definitions/UserOrganization-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a UserOrganization resource.",
        "tags": [
          "UserOrganization"
        ]
      }
    },
    "/user-organizations/{id}": {
      "delete": {
        "operationId": "deleteUserOrganizationItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "UserOrganization resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Removes the UserOrganization resource.",
        "tags": [
          "UserOrganization"
        ]
      },
      "get": {
        "operationId": "getUserOrganizationItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "UserOrganization resource response",
            "schema": {
              "$ref": "#/definitions/UserOrganization-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a UserOrganization resource.",
        "tags": [
          "UserOrganization"
        ]
      },
      "put": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "putUserOrganizationItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated UserOrganization resource",
            "in": "body",
            "name": "userOrganization",
            "schema": {
              "$ref": "#/definitions/UserOrganization-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "UserOrganization resource updated",
            "schema": {
              "$ref": "#/definitions/UserOrganization-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Replaces the UserOrganization resource.",
        "tags": [
          "UserOrganization"
        ]
      }
    },
    "/user-project-flatteneds/{id}": {
      "get": {
        "operationId": "getUserProjectFlattenedItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "UserProjectFlattened resource response",
            "schema": {
              "$ref": "#/definitions/UserProjectFlattened-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a UserProjectFlattened resource.",
        "tags": [
          "UserProjectFlattened"
        ]
      }
    },
    "/user-projects": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postUserProjectCollection",
        "parameters": [
          {
            "description": "The new UserProject resource",
            "in": "body",
            "name": "userProject",
            "schema": {
              "$ref": "#/definitions/UserProject-CreationWrite"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "UserProject resource created",
            "schema": {
              "$ref": "#/definitions/UserProject-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a UserProject resource.",
        "tags": [
          "UserProject"
        ]
      }
    },
    "/user-projects/{id}": {
      "delete": {
        "operationId": "deleteUserProjectItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "UserProject resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Removes the UserProject resource.",
        "tags": [
          "UserProject"
        ]
      },
      "get": {
        "operationId": "getUserProjectItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "UserProject resource response",
            "schema": {
              "$ref": "#/definitions/UserProject-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a UserProject resource.",
        "tags": [
          "UserProject"
        ]
      },
      "put": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "putUserProjectItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated UserProject resource",
            "in": "body",
            "name": "userProject",
            "schema": {
              "$ref": "#/definitions/UserProject-Write"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "UserProject resource updated",
            "schema": {
              "$ref": "#/definitions/UserProject-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Replaces the UserProject resource.",
        "tags": [
          "UserProject"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "getUserCollection",
        "parameters": [
          {
            "in": "query",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "User collection response",
            "schema": {
              "items": {
                "$ref": "#/definitions/User-List"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieves the collection of User resources.",
        "tags": [
          "User"
        ]
      },
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postUserCollection",
        "parameters": [
          {
            "description": "The new User resource",
            "in": "body",
            "name": "user",
            "schema": {
              "$ref": "#/definitions/User-CreationWrite"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "User resource created",
            "schema": {
              "$ref": "#/definitions/User-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a User resource.",
        "tags": [
          "User"
        ]
      }
    },
    "/users/forgot-password-request": {
      "post": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "postForgotPasswordRequestCollection",
        "parameters": [
          {
            "description": "The new ForgotPasswordRequest resource",
            "in": "body",
            "name": "forgotPasswordRequest",
            "schema": {
              "$ref": "#/definitions/ForgotPasswordRequest"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "201": {
            "description": "ForgotPasswordRequest resource created",
            "schema": {
              "$ref": "#/definitions/ForgotPasswordRequest"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Creates a ForgotPasswordRequest resource.",
        "tags": [
          "ForgotPasswordRequest"
        ]
      }
    },
    "/users/forgot-password/{resetToken}": {
      "put": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "forgot_passwordUserItem",
        "parameters": [
          {
            "in": "path",
            "name": "resetToken",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated User resource",
            "in": "body",
            "name": "user",
            "schema": {
              "$ref": "#/definitions/User-Password"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "User resource updated",
            "schema": {
              "$ref": "#/definitions/User-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Replaces the User resource.",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "getUserItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "User resource response",
            "schema": {
              "$ref": "#/definitions/User-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a User resource.",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/confirm-new-email/{newEmailToken}": {
      "get": {
        "operationId": "confirm_new_emailUserItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "newEmailToken",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "User resource response",
            "schema": {
              "$ref": "#/definitions/User-Read"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieves a User resource.",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/edit-email": {
      "put": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "edit_emailUserItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated User resource",
            "in": "body",
            "name": "user",
            "schema": {
              "$ref": "#/definitions/User-EditInfo"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "User resource updated",
            "schema": {
              "$ref": "#/definitions/User-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Replaces the User resource.",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/edit-info": {
      "put": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "edit_infoUserItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated User resource",
            "in": "body",
            "name": "user",
            "schema": {
              "$ref": "#/definitions/User-EditInfo"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "User resource updated",
            "schema": {
              "$ref": "#/definitions/User-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Replaces the User resource.",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}/edit-password": {
      "put": {
        "consumes": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "operationId": "edit_passwordUserItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The updated User resource",
            "in": "body",
            "name": "user",
            "schema": {
              "$ref": "#/definitions/User-EditInfo"
            }
          }
        ],
        "produces": [
          "application/ld+json",
          "application/json",
          "text/html",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "User resource updated",
            "schema": {
              "$ref": "#/definitions/User-Read"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Replaces the User resource.",
        "tags": [
          "User"
        ]
      }
    }
  },
  "definitions": {
    "AgentFlushAggregateRequest": {
      "description": "",
      "properties": {
        "instanceName": {},
        "instanceTime": {},
        "logs": {}
      },
      "required": [
        "logs",
        "instanceName",
        "instanceTime"
      ],
      "type": "object"
    },
    "AgentFlushRequest": {
      "description": "",
      "properties": {
        "instanceName": {},
        "instanceTime": {},
        "logs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "logs",
        "instanceName",
        "instanceTime"
      ],
      "type": "object"
    },
    "AgentInstanceUpdate-Read": {
      "description": "",
      "properties": {
        "completedAt": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "features": {
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AgentInstanceUpdate-WriteStart": {
      "description": "",
      "properties": {
        "instanceName": {
          "description": "BC Layer for old agent."
        },
        "name": {}
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "AggregateLog-Read": {
      "description": "",
      "properties": {
        "fromUrl": {},
        "host": {},
        "id": {},
        "lastOccurrenceAt": {},
        "scheme": {},
        "statusCode": {},
        "toUrl": {},
        "viewCount": {}
      },
      "type": "object"
    },
    "ExplainUrl": {
      "description": "",
      "properties": {
        "explain": {},
        "id": {},
        "project": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url",
        "project"
      ],
      "type": "object"
    },
    "ExplainUrl-Write": {
      "description": "",
      "properties": {
        "project": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url",
        "project"
      ],
      "type": "object"
    },
    "Export-Read": {
      "description": "",
      "properties": {
        "author": {
          "type": "string"
        },
        "completedAt": {
          "format": "date-time",
          "type": "string"
        },
        "exportDuration": {
          "type": "integer"
        },
        "filters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "itemsCount": {
          "type": "integer"
        },
        "location": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "sort": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startedAt": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "type": "integer"
        },
        "statusAsText": {
          "readOnly": true,
          "type": "string"
        },
        "typeAsText": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "project",
        "author",
        "typeAsText"
      ],
      "type": "object"
    },
    "Export-Write": {
      "description": "",
      "properties": {
        "filters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project": {
          "type": "string"
        },
        "sort": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "typeAsText": {
          "type": "string"
        }
      },
      "required": [
        "project",
        "typeAsText"
      ],
      "type": "object"
    },
    "ForgotPasswordRequest": {
      "description": "",
      "properties": {
        "email": {
          "type": "string"
        }
      },
      "required": [
        "email"
      ],
      "type": "object"
    },
    "ImpactRuleAction": {
      "description": "",
      "properties": {
        "id": {},
        "impact": {},
        "project": {
          "type": "string"
        },
        "ruleAction": {
          "type": "string"
        }
      },
      "required": [
        "project",
        "ruleAction"
      ],
      "type": "object"
    },
    "ImpactRuleAction-Read": {
      "description": "",
      "properties": {
        "impact": {}
      },
      "type": "object"
    },
    "ImpactRuleAction-Write": {
      "description": "",
      "properties": {
        "project": {
          "type": "string"
        },
        "ruleAction": {
          "type": "string"
        }
      },
      "required": [
        "project",
        "ruleAction"
      ],
      "type": "object"
    },
    "Import-Read": {
      "description": "",
      "properties": {
        "author": {
          "type": "string"
        },
        "completedAt": {
          "format": "date-time",
          "type": "string"
        },
        "errorCount": {
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "importDuration": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "shouldEnable": {
          "type": "boolean"
        },
        "startedAt": {
          "format": "date-time",
          "type": "string"
        },
        "statusAsText": {
          "readOnly": true
        },
        "successCount": {
          "type": "integer"
        },
        "typeAsText": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "project",
        "author",
        "typeAsText"
      ],
      "type": "object"
    },
    "Import-Write": {
      "description": "",
      "properties": {
        "csvContent": {},
        "project": {
          "type": "string"
        },
        "shouldEnable": {
          "type": "boolean"
        },
        "typeAsText": {
          "type": "string"
        }
      },
      "required": [
        "project",
        "csvContent",
        "typeAsText"
      ],
      "type": "object"
    },
    "Instance-Read": {
      "description": "",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "logging": {
          "type": "boolean"
        },
        "misconfigured": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "updates": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Invitation": {
      "description": "",
      "properties": {
        "accepted": {
          "readOnly": true,
          "type": "boolean"
        },
        "createdAt": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "email": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "sender": {
          "readOnly": true,
          "type": "string"
        },
        "target": {
          "readOnly": true,
          "type": "string"
        },
        "targetId": {
          "readOnly": true,
          "type": "string"
        },
        "targetType": {
          "readOnly": true,
          "type": "string"
        },
        "token": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "Invitation-Read": {
      "description": "",
      "type": "object"
    },
    "Invitation-Write": {
      "description": "",
      "properties": {
        "email": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "target"
      ],
      "type": "object"
    },
    "Log-Read": {
      "description": "",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "fromUrl": {},
        "host": {},
        "id": {},
        "instanceName": {},
        "referer": {},
        "scheme": {},
        "simplifiedUserAgent": {},
        "statusCode": {},
        "toUrl": {},
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "userAgent": {}
      },
      "type": "object"
    },
    "Organization-List": {
      "description": "",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projects": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "slug": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Organization-Read": {
      "description": "",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projects": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "slug": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "userOrganizations": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Organization-Write": {
      "description": "",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Project-CreationWrite": {
      "description": "",
      "properties": {
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "organization"
      ],
      "type": "object"
    },
    "Project-Read": {
      "description": "",
      "properties": {
        "complexRulesCount": {
          "type": "integer"
        },
        "complexRulesUpdatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "currentVersion": {
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "straightRulesCount": {
          "type": "integer"
        },
        "straightRulesUpdatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "userProjects": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "usersFlattened": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workingVersion": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "organization"
      ],
      "type": "object"
    },
    "Project-Write": {
      "description": "",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "PublishHistory": {
      "description": "",
      "properties": {
        "added": {
          "type": "integer"
        },
        "author": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "deleted": {
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "integer"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PublishHistory-Read": {
      "description": "",
      "properties": {
        "added": {
          "type": "integer"
        },
        "author": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "deleted": {
          "type": "integer"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "integer"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RuleAction-Read": {
      "description": "",
      "properties": {
        "action": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "rank": {
          "type": "integer"
        },
        "ruleId": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "action",
        "type",
        "source",
        "statusCode",
        "isEnabled",
        "rank"
      ],
      "type": "object"
    },
    "RuleAction-Write": {
      "description": "",
      "properties": {
        "action": {
          "type": "string"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "rank": {
          "type": "integer"
        },
        "ruleId": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "statusCode": {
          "type": "integer"
        },
        "target": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "action",
        "type",
        "source",
        "statusCode",
        "isEnabled",
        "rank"
      ],
      "type": "object"
    },
    "RuleComplex-Read": {
      "description": "",
      "properties": {
        "actions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "currentAction": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "rank": {
          "type": "integer"
        },
        "redirectCode": {
          "type": "integer"
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "viewCount": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RuleSetVersion": {
      "description": "",
      "properties": {
        "actions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "added": {
          "type": "integer"
        },
        "createdAt": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "current": {
          "readOnly": true,
          "type": "boolean"
        },
        "deleted": {
          "type": "integer"
        },
        "histories": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "isSnapshot": {
          "type": "boolean"
        },
        "lastAction": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nexts": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "previous": {
          "type": "string"
        },
        "project": {
          "readOnly": true,
          "type": "string"
        },
        "publishedAt": {
          "format": "date-time",
          "type": "string"
        },
        "snapshot": {
          "readOnly": true,
          "type": "boolean"
        },
        "updated": {
          "type": "integer"
        },
        "working": {
          "readOnly": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RuleSetVersion-Read": {
      "description": "",
      "properties": {
        "createdAt": {
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "current": {
          "readOnly": true,
          "type": "boolean"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "isSnapshot": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "publishedAt": {
          "format": "date-time",
          "type": "string"
        },
        "working": {
          "readOnly": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RuleSimple-Read": {
      "description": "",
      "properties": {
        "actions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "currentAction": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "rank": {
          "type": "integer"
        },
        "redirectCode": {
          "type": "integer"
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "viewCount": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "User-CreationWrite": {
      "description": "",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "User-EditInfo": {
      "description": "",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "User-List": {
      "description": "",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      },
      "required": [
        "email",
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "User-Password": {
      "description": "",
      "properties": {
        "plainPassword": {
          "type": "string"
        },
        "plainPasswordRepeat": {}
      },
      "type": "object"
    },
    "User-Read": {
      "description": "",
      "properties": {
        "defaultOrganization": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "userOrganizations": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "email",
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "UserOrganization-CreationWrite": {
      "description": "",
      "properties": {
        "functionalRoles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "organization": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      },
      "required": [
        "user",
        "organization",
        "functionalRoles"
      ],
      "type": "object"
    },
    "UserOrganization-Read": {
      "description": "",
      "properties": {
        "functionalRoles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      },
      "required": [
        "user",
        "organization",
        "functionalRoles"
      ],
      "type": "object"
    },
    "UserOrganization-Write": {
      "description": "",
      "properties": {
        "functionalRoles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "functionalRoles"
      ],
      "type": "object"
    },
    "UserProject-CreationWrite": {
      "description": "",
      "properties": {
        "functionalRoles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      },
      "required": [
        "user",
        "project",
        "functionalRoles"
      ],
      "type": "object"
    },
    "UserProject-Read": {
      "description": "",
      "properties": {
        "functionalRoles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "readOnly": true,
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      },
      "required": [
        "user",
        "project",
        "functionalRoles"
      ],
      "type": "object"
    },
    "UserProject-Write": {
      "description": "",
      "properties": {
        "functionalRoles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "functionalRoles"
      ],
      "type": "object"
    },
    "UserProjectFlattened-Read": {
      "description": "",
      "type": "object"
    }
  }
}
